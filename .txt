//   expenseTotal: any = 0;
//   revenueTotal: any = 0;
//   balance: any = 0;

//   expenseChartData: any;
//   revenueChartData: any;

//   chartOptions = {
//     scales: {
//       y: {
//         ticks: {
//           beginAtZero: true
//         }
//       }
//     }
//   } 


//   categories: Category[] = [];
//   entries: Entry[] = [];

//   @ViewChild('month') month!: ElementRef ;
//   @ViewChild('year') year!: ElementRef

//   constructor(
//     private categoryService: CategoryService,
//     private entryService: EntryService,
//   ) { 
//   }

//   ngOnInit() {
//     this.categoryService.getAll()
//     .subscribe(
//       categories => this.categories = categories
//     );  
//     // Define o valor base como 0 
    
//   }

//   generateReports() {
//     const month = this.month.nativeElement.value;
//     const year = this.year.nativeElement.value;

//     console.log(month, year);
    

//     if(!month || !year) {
//       alert('Você precisa selecionar o Mês e o Ano para gerar os relatórios');
    
//     } else {

//       this.entryService.getByMonthAndYear(month, year)
//         .subscribe(this.setValues.bind(this));
//     }

//   }

//   private setValues(entries: Entry[]) {
//     this.entries = entries;
//     this.calculateBalance();
//     this.setChartData();
//     console.log(this.entries);
    
//   }

//   private calculateBalance() {
//     let expenseTotal = 0;
//     let revenueTotal = 0;
//     console.log(this.entries);
    
//     this.entries.forEach(entry => {
//       if(entry.type == 'revenue') {
//         revenueTotal += currencyFormatter.unformat(entry.amount, {code: 'BRL'});
//       } else {
//         expenseTotal += currencyFormatter.unformat(entry.amount, {code: 'BRL'});
//       }
//     });

//     this.expenseTotal = currencyFormatter.format(expenseTotal, {code: 'BRL'});
//     this.revenueTotal = currencyFormatter.format(revenueTotal, {code: 'BRL'});

//     this.balance = currencyFormatter.format(revenueTotal - expenseTotal, {code: 'BRL'});
//     console.log(this.expenseTotal, this.revenueTotal, this.balance);
    
//   }

//   private setChartData() {
//    this.revenueChartData = this.getChartData('revenue', 'Gráfico de Receitas', '#9ccc65');
//    this.expenseChartData = this.getChartData('expense', 'Gráfico de Despesas', '#e03131');
//    console.log(`${this.revenueChartData[0]} `);
   
//   }

//   private getChartData(entryType: string, title: string, color: string) {
//     const chartData:any = [];

//     this.categories.forEach(category => {
//       //Filtrando todos os lançamentos pela categoria e tipo
//       let filteredEntries = this.entries.filter(
//         entry => (entry.categoryId == category.id) && (entry.type == entryType)
//       );

//       // Se por acaso for encontrados lançamentos, some-os e os mostre no gráfico
//       if(filteredEntries.length > 0) {
//         const totalAmount = filteredEntries.reduce(
//           (total, entry) => total + currencyFormatter.unformat(entry.amount, { code: 'BRL' }), 0
//         )

//         chartData.push({
//           categoryName: category.name,
//           totalAmount: totalAmount
//         })
//       }
//     })

//     console.log(chartData)
//     return {
//       labels: chartData.map((item: { categoryName: any; }) => item.categoryName),
//       datasers: [{
//         label: title,
//         backgroundColor: color,
//         data: chartData.map((item: { totalAmount: any; }) => item.totalAmount)
//       }]
//     }  
    
//   }

// }